//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/KeyboardInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyboardInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyboardInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardInput"",
    ""maps"": [
        {
            ""name"": ""Common"",
            ""id"": ""f80785f2-ecd1-4e8e-b560-4a8d1ffec1a4"",
            ""actions"": [
                {
                    ""name"": ""TurnCam"",
                    ""type"": ""Button"",
                    ""id"": ""5f739418-2d0a-4b3e-a4d7-534c5d75783d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TiltCam"",
                    ""type"": ""Button"",
                    ""id"": ""14c01eb4-f627-410c-a613-25e00759919d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bfd760e5-813c-49ba-b88f-184b99da8c47"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnCam"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3d9c858a-1563-4ae9-be3c-b1f7773f8b76"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""160f8fc9-4afd-4c3a-a8ab-09bcb3745355"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""223fe77e-0a3b-4b31-b26e-4c334ee917bd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TiltCam"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c772adb8-52a5-4121-b591-2fdc7b47d7cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TiltCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1510dfa9-15ac-4351-a938-3f3eb45dc373"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TiltCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Base"",
            ""id"": ""969c29a2-be0c-4b8e-a221-7fb25f387981"",
            ""actions"": [
                {
                    ""name"": ""ConfirmTarget"",
                    ""type"": ""Button"",
                    ""id"": ""2022e8e4-9df9-4d2b-9cbf-e2da79d640da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TargetPositionEnable"",
                    ""type"": ""Button"",
                    ""id"": ""de3d4e58-ac43-49f0-b339-4a68ab49eca0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TargetPosition"",
                    ""type"": ""Value"",
                    ""id"": ""4f606d49-849a-4872-bbc5-99630588b825"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TargetRotation"",
                    ""type"": ""Value"",
                    ""id"": ""8f2fb25c-0cb8-4cb5-9238-290463f48b22"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StopRobot"",
                    ""type"": ""Button"",
                    ""id"": ""b397622a-78e9-48ef-be23-22db1fc78415"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f9bf93e-ed8a-41b0-99e7-f2f7496334ef"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9865120f-55ab-488a-8a90-49f800949d73"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TargetPositionEnable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2700ac00-b1bc-4efa-9cd1-d24bf21a7cfc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TargetPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45684fda-ce55-49db-89b3-12d470b39fca"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TargetRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a40171d7-4ea2-4c16-a5ac-04673e760bbf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopRobot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Arm"",
            ""id"": ""5f3d7503-9ab1-43fe-b699-13a960dcf6db"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""50104734-b26c-4dda-a5d0-4d3eb1cd8e6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a633eec3-371b-47e0-a786-292b7e75de6a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Common
        m_Common = asset.FindActionMap("Common", throwIfNotFound: true);
        m_Common_TurnCam = m_Common.FindAction("TurnCam", throwIfNotFound: true);
        m_Common_TiltCam = m_Common.FindAction("TiltCam", throwIfNotFound: true);
        // Base
        m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
        m_Base_ConfirmTarget = m_Base.FindAction("ConfirmTarget", throwIfNotFound: true);
        m_Base_TargetPositionEnable = m_Base.FindAction("TargetPositionEnable", throwIfNotFound: true);
        m_Base_TargetPosition = m_Base.FindAction("TargetPosition", throwIfNotFound: true);
        m_Base_TargetRotation = m_Base.FindAction("TargetRotation", throwIfNotFound: true);
        m_Base_StopRobot = m_Base.FindAction("StopRobot", throwIfNotFound: true);
        // Arm
        m_Arm = asset.FindActionMap("Arm", throwIfNotFound: true);
        m_Arm_Newaction = m_Arm.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Common
    private readonly InputActionMap m_Common;
    private ICommonActions m_CommonActionsCallbackInterface;
    private readonly InputAction m_Common_TurnCam;
    private readonly InputAction m_Common_TiltCam;
    public struct CommonActions
    {
        private @KeyboardInput m_Wrapper;
        public CommonActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TurnCam => m_Wrapper.m_Common_TurnCam;
        public InputAction @TiltCam => m_Wrapper.m_Common_TiltCam;
        public InputActionMap Get() { return m_Wrapper.m_Common; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonActions set) { return set.Get(); }
        public void SetCallbacks(ICommonActions instance)
        {
            if (m_Wrapper.m_CommonActionsCallbackInterface != null)
            {
                @TurnCam.started -= m_Wrapper.m_CommonActionsCallbackInterface.OnTurnCam;
                @TurnCam.performed -= m_Wrapper.m_CommonActionsCallbackInterface.OnTurnCam;
                @TurnCam.canceled -= m_Wrapper.m_CommonActionsCallbackInterface.OnTurnCam;
                @TiltCam.started -= m_Wrapper.m_CommonActionsCallbackInterface.OnTiltCam;
                @TiltCam.performed -= m_Wrapper.m_CommonActionsCallbackInterface.OnTiltCam;
                @TiltCam.canceled -= m_Wrapper.m_CommonActionsCallbackInterface.OnTiltCam;
            }
            m_Wrapper.m_CommonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TurnCam.started += instance.OnTurnCam;
                @TurnCam.performed += instance.OnTurnCam;
                @TurnCam.canceled += instance.OnTurnCam;
                @TiltCam.started += instance.OnTiltCam;
                @TiltCam.performed += instance.OnTiltCam;
                @TiltCam.canceled += instance.OnTiltCam;
            }
        }
    }
    public CommonActions @Common => new CommonActions(this);

    // Base
    private readonly InputActionMap m_Base;
    private IBaseActions m_BaseActionsCallbackInterface;
    private readonly InputAction m_Base_ConfirmTarget;
    private readonly InputAction m_Base_TargetPositionEnable;
    private readonly InputAction m_Base_TargetPosition;
    private readonly InputAction m_Base_TargetRotation;
    private readonly InputAction m_Base_StopRobot;
    public struct BaseActions
    {
        private @KeyboardInput m_Wrapper;
        public BaseActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ConfirmTarget => m_Wrapper.m_Base_ConfirmTarget;
        public InputAction @TargetPositionEnable => m_Wrapper.m_Base_TargetPositionEnable;
        public InputAction @TargetPosition => m_Wrapper.m_Base_TargetPosition;
        public InputAction @TargetRotation => m_Wrapper.m_Base_TargetRotation;
        public InputAction @StopRobot => m_Wrapper.m_Base_StopRobot;
        public InputActionMap Get() { return m_Wrapper.m_Base; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
        public void SetCallbacks(IBaseActions instance)
        {
            if (m_Wrapper.m_BaseActionsCallbackInterface != null)
            {
                @ConfirmTarget.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnConfirmTarget;
                @ConfirmTarget.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnConfirmTarget;
                @ConfirmTarget.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnConfirmTarget;
                @TargetPositionEnable.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetPositionEnable;
                @TargetPositionEnable.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetPositionEnable;
                @TargetPositionEnable.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetPositionEnable;
                @TargetPosition.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetPosition;
                @TargetPosition.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetPosition;
                @TargetPosition.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetPosition;
                @TargetRotation.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetRotation;
                @TargetRotation.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetRotation;
                @TargetRotation.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnTargetRotation;
                @StopRobot.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnStopRobot;
                @StopRobot.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnStopRobot;
                @StopRobot.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnStopRobot;
            }
            m_Wrapper.m_BaseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ConfirmTarget.started += instance.OnConfirmTarget;
                @ConfirmTarget.performed += instance.OnConfirmTarget;
                @ConfirmTarget.canceled += instance.OnConfirmTarget;
                @TargetPositionEnable.started += instance.OnTargetPositionEnable;
                @TargetPositionEnable.performed += instance.OnTargetPositionEnable;
                @TargetPositionEnable.canceled += instance.OnTargetPositionEnable;
                @TargetPosition.started += instance.OnTargetPosition;
                @TargetPosition.performed += instance.OnTargetPosition;
                @TargetPosition.canceled += instance.OnTargetPosition;
                @TargetRotation.started += instance.OnTargetRotation;
                @TargetRotation.performed += instance.OnTargetRotation;
                @TargetRotation.canceled += instance.OnTargetRotation;
                @StopRobot.started += instance.OnStopRobot;
                @StopRobot.performed += instance.OnStopRobot;
                @StopRobot.canceled += instance.OnStopRobot;
            }
        }
    }
    public BaseActions @Base => new BaseActions(this);

    // Arm
    private readonly InputActionMap m_Arm;
    private IArmActions m_ArmActionsCallbackInterface;
    private readonly InputAction m_Arm_Newaction;
    public struct ArmActions
    {
        private @KeyboardInput m_Wrapper;
        public ArmActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Arm_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Arm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArmActions set) { return set.Get(); }
        public void SetCallbacks(IArmActions instance)
        {
            if (m_Wrapper.m_ArmActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_ArmActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_ArmActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_ArmActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_ArmActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public ArmActions @Arm => new ArmActions(this);
    public interface ICommonActions
    {
        void OnTurnCam(InputAction.CallbackContext context);
        void OnTiltCam(InputAction.CallbackContext context);
    }
    public interface IBaseActions
    {
        void OnConfirmTarget(InputAction.CallbackContext context);
        void OnTargetPositionEnable(InputAction.CallbackContext context);
        void OnTargetPosition(InputAction.CallbackContext context);
        void OnTargetRotation(InputAction.CallbackContext context);
        void OnStopRobot(InputAction.CallbackContext context);
    }
    public interface IArmActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
